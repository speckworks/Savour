{"version":3,"sources":["web-build/register-service-worker.js","App.tsx","constants.js","index.js"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","registerRootComponent","AppLoading"],"mappings":"gHAEI,kBAAmBA,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAASC,OAGdC,OAAM,SAASC,GACdC,QAAQH,KAAK,oCAAqCE,U,qsBCE1D,IAAME,EAAWC,YAAe,CAC9BC,IAAK,0BAEDC,EAAWC,aAAW,SAACC,EAAD,GAAoB,IAAdC,EAAa,EAAbA,QAC1BC,EAAQC,aAAaC,QChBH,cDiBxB,MAAO,CACLH,QAAQ,EAAD,GACFA,EADE,CAELI,cAAeH,EAAK,UAAaA,EAAb,SAIpBI,EAAS,IAAIC,IAAa,CAC9BC,KAAMV,EAASW,OAAOd,GACtBe,MAAO,IAAIC,MEnBbC,aFsBe,WAEX,OACE,kBAAC,IAAD,CAAgBN,OAAQA,GACrB,kBAACO,EAAA,EAAD,Y","file":"static/js/app.636a6fa0.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import React, { useState } from 'react';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo';\nimport Navigator from './routes/drawer';\n//Apollo config\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context'\nimport { AUTH_TOKEN } from './constants'\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000'\n})\nconst authLink = setContext((_, { headers}) => {\n  const token = localStorage.getItem(AUTH_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ``\n    }\n  }\n})\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n})\n\nexport default function App() {\n \n    return (\n      <ApolloProvider client={client}>\n         <AppLoading/>\n      </ApolloProvider>\n    )\n  }\n","export const AUTH_TOKEN = 'auth-token'","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}